package com.mycompany.modeloia;

import java.awt.BorderLayout;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetAdapter;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.io.File;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

public class JpanelIA extends javax.swing.JPanel {

    private JLabel resultLabel;
    private ItemClassifier classifier;

    /**
     * Creates new form JpanelIA
     */
    public JpanelIA() {
        initComponents(); // Código generado por NetBeans (no modificar)
        initCustomComponents(); // Nuestro código personalizado para la UI
        initClassifier();       // Carga el clasificador y la base de datos de ítems
    }

    // Método para agregar componentes y funcionalidad personalizada (drag & drop)
    private void initCustomComponents() {
        // Usamos BorderLayout para la organización
        setLayout(new BorderLayout());
        setBorder(BorderFactory.createTitledBorder("Arrastra y suelta un archivo"));

        // Crear y agregar la etiqueta para mostrar mensajes/resultados
        resultLabel = new JLabel("Arrastra un archivo de imagen aquí", JLabel.CENTER);
        add(resultLabel, BorderLayout.SOUTH);

        // Configurar el DropTarget para aceptar archivos
        new DropTarget(this, DnDConstants.ACTION_COPY, new DropTargetAdapter() {
            @Override
            public void drop(DropTargetDropEvent dtde) {
                dtde.acceptDrop(DnDConstants.ACTION_COPY);
                Transferable transferable = dtde.getTransferable();
                try {
                    @SuppressWarnings("unchecked")
                    List<File> droppedFiles = (List<File>) transferable.getTransferData(DataFlavor.javaFileListFlavor);
                    if (!droppedFiles.isEmpty()) {
                        File file = droppedFiles.get(0);
                        resultLabel.setText("Procesando: " + file.getName());
                        // Ejecutar la clasificación en un hilo aparte para no bloquear la UI
                        new Thread(() -> {
                            try {
                                ItemClassifier.PredictionResult result = classifier.predictItem(file.getAbsolutePath());
                                SwingUtilities.invokeLater(() -> {
                                    resultLabel.setText("<html>Predicción: " + result.label
                                            + "<br>Distancia: " + String.format("%.4f", result.distance) + "</html>");
                                });
                            } catch (Exception ex) {
                                ex.printStackTrace();
                                SwingUtilities.invokeLater(() -> {
                                    resultLabel.setText("Error: " + ex.getMessage());
                                });
                            }
                        }).start();
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                    resultLabel.setText("Error al leer el archivo.");
                }
            }
        }, true);
    }

    // Inicializa el clasificador y carga la base de datos de ítems en un hilo aparte
    private void initClassifier() {
        new Thread(() -> {
            try {
                classifier = new ItemClassifier();
                // Ruta a la carpeta ITEMS (verifica que la ruta sea la correcta)
                String itemsFolder = "C:\\Users\\cjcue\\Documents\\NetBeansProjects\\ModeloIA\\src\\main\\resources\\ITEMS";
                classifier.buildDatabase(itemsFolder);
                SwingUtilities.invokeLater(() -> {
                    resultLabel.setText("Clasificador listo. Arrastra un archivo para probar.");
                });
            } catch (Exception e) {
                e.printStackTrace();
                SwingUtilities.invokeLater(() -> {
                    resultLabel.setText("Error al inicializar clasificador: " + e.getMessage());
                });
            }
        }).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify
    // End of variables declaration
               
}

        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
